`timescale 10 ns/ 1 ns
module i2c_master_vlg_tst();
    parameter ADDR_SZ = 7;         // address widht
    parameter DATA_SZ = 8;         // data widht

    
    reg                CLK;        // clock 50 MHz
    reg                RST_n;      // asynchronous reset_n
    wire               scl;        // serial clock from clk div
    wire               rs_pr_scl;  // rising edge prev_scl for sda
    wire               fl_pr_scl;  // falling edge prev_scl for sda
    reg                I_EN;       // I2C bus enable signal from cpu
    reg                I_RW;       // read or write command   
    reg [ADDR_SZ-1:0]  I_ADDR;     // slave address
    reg [DATA_SZ-1:0]  I_DATA_WR;  // data to write to the slave                                                               
    wire               IO_SCL;     // serial clock I2C bus
    wire               IO_SDA;     // serial data I2C bus
    wire               O_ACK_FL;   // flag in case of error
    wire [DATA_SZ-1:0] O_DATA_RD;  // readed data from the slave  
    wire               O_BUSY;     // master busy signal
    reg                en_sda_slv; // enable signal to simulate input sda from the slave
    reg                sda_slv;    // input sda from the slave

    
    i2c_master dut 
        (  
         .CLK(CLK),
         .RST_n(RST_n),
         .I_EN(I_EN),
         .I_ADDR(I_ADDR),
         .I_RW(I_RW),
         .I_DATA_WR(I_DATA_WR),
         .O_DATA_RD(O_DATA_RD),
         .O_ACK_FL(O_ACK_FL),
         .O_BUSY(O_BUSY),
         .IO_SCL(IO_SCL),
         .IO_SDA(IO_SDA)
        ); 

    assign scl = dut.scl;
    assign rs_pr_scl = dut.rs_pr_scl;
    assign fl_pr_scl = dut.fl_pr_scl;
    assign IO_SDA = en_sda_slv ? sda_slv : 1'bz; 
    
    initial begin
      CLK = 1'b1;
      RST_n = 1'b1;
      en_sda_slv = 1'b0;
//    start reset
      #1; RST_n = 0;
//    stop reset
      #2; RST_n = 1;
          
//    start of the first of transaction (Writing one byte 8'b1010_1010 to address 7'b010_1010)
      I_EN = 1'b1;
      I_RW = 1'b0;    
      I_ADDR = 7'b010_1010; 
      I_DATA_WR = 8'b1010_1010;
      // acknowledge slave command
      #9251; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000; en_sda_slv = 1'b0;
      // ACK data error
      #8000; en_sda_slv = 1'b1; sda_slv = 1'b1;
      #500; I_EN = 1'b0;  
      #500; en_sda_slv = 1'b0;
//    end of the first of transaction and transition to idle
      
//    start of the second of transaction (writing write two bytes 8'b0101_0101, 8'b1010_1010 to address 7'b101_0101)
      #5000; 
      I_EN = 1'b1;
      I_RW = 1'b0;
      I_ADDR = 7'b101_0101; 
      I_DATA_WR = 8'b0101_0101;
      // acknowledge slave command
      #10000; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000; en_sda_slv = 1'b0;
      // acknowledge slave data (1 byte)
      #8000; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #500; I_DATA_WR = 8'b1010_1010; 
      #500; en_sda_slv = 1'b0;
      // acknowledge slave data (2 byte)
      #8000; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #500; I_EN = 1'b0;      
      #500; en_sda_slv = 1'b0;   
//    end of the second of transaction and transition to idle
      
//    start of the third of transaction (reading one byte 8'b1010_1010 to address 7'b010_1010)
      #5000; 
      I_EN = 1'b1;
      I_RW = 1'b1; 
      I_ADDR = 7'b010_1010;
      // acknowledge slave command
      #10000; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000;
      // receiving data from the slave 8'b1010_1010
      repeat (3) begin
        sda_slv = 1'b1;
        #1000;
        sda_slv = 1'b0;
        #1000;   
      end
      sda_slv = 1'b1;
      #1000;
      sda_slv = 1'b0;
      #500; I_EN = 1'b0;      
      #500; en_sda_slv = 1'b0;
//    end of the third of receiving data from the slave and  of transaction, transition to idle
      
//    start of the fourth of transaction (reading two bytes 8'b0101_0101, 8'b1010_1010 to address 7'b101_0101)   
      #6500; 
      I_EN = 1'b1;
      I_RW = 1'b1;
      I_ADDR = 7'b101_0101; 
      // acknowledge slave command
      #9500; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000;        
      // receiving data from the slave 8'b0101_0101 (1 byte)
      repeat (4) begin
        sda_slv = 1'b0;
        #1000;
        sda_slv = 1'b1;
        #1000;   
      end
      en_sda_slv = 1'b0;
     // receiving data from the slave 8'b1010_1010 (2 byte)
     #1000; en_sda_slv = 1'b1;
      repeat (3) begin
        sda_slv = 1'b1;
        #1000;
        sda_slv = 1'b0;
        #1000;   
      end
      sda_slv = 1'b1;
      #1000;
      sda_slv = 1'b0;
      #500; I_EN = 1'b0;      
      #500; en_sda_slv = 1'b0;
//    end of the fourth of receiving data from the slave and  of transaction, transition to idle
          
//    start of the fifth of transaction (writing one byte 8'b0011_0011 to address 7'b110_0110, then restart and reading one byte 8'b010_10101 to address 7'b001_1001)    
      #6500; 
      I_EN = 1'b1;
      I_RW = 1'b0; 
      I_ADDR = 7'b110_0110; 
      I_DATA_WR = 8'b0011_0011; 
      // acknowledge slave command
      #9500; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000; en_sda_slv = 1'b0;
      // acknowledge slave data (1 byte)
      #8000; en_sda_slv = 1'b1; sda_slv = 1'b0;
      // continue the transaction at the new address
      // setting read/write, address, data from cpu
      I_RW = 1'b1; 
      I_ADDR = 7'b001_1001;       
      #1000; en_sda_slv = 1'b0;   
      // acknowledge slave command
      #1000;
      #9000; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000;      
      // receiving data from the slave 8'b010_10101 (1 byte)
      repeat (3) begin
        sda_slv = 1'b0;
        #1000;
        sda_slv = 1'b1;
        #1000;   
      end
      sda_slv = 1'b0;
      #1000;
      sda_slv = 1'b1;
      #500; I_EN = 1'b0;      
      #500; en_sda_slv = 1'b0; 
//    end of the fifth of receiving data from the slave and  of transaction, transition to idle   
        
//    start of the sixth of transaction (reading one byte 8'b0101_0111 to address 7'b101_0101, then restart and writing one byte 8'b1100_1100 to address 7'b010_1010)    
      #6500; 
      I_EN = 1'b1;
      I_RW = 1'b1;
      I_ADDR = 7'b101_0101; 
      // acknowledge slave command
      #9500; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000;        
      // receiving data from the slave 8'b0101_0111 (1 byte)
      repeat (3) begin
        sda_slv = 1'b0;
        #1000;
        sda_slv = 1'b1;
        #1000;   
      end
      sda_slv = 1'b1;
      #2000;      
      en_sda_slv = 1'b0;      
      // write 1 byte to slave       
      #500;
      I_RW = 1'b0;    
      I_ADDR = 7'b010_1010;
      I_DATA_WR = 8'b1100_1100;       
      // acknowledge slave command
      #10500; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000;
      en_sda_slv = 1'b0;      
      // ACK data error
      #8000; en_sda_slv = 1'b1; sda_slv = 1'b1;
      #500; I_EN = 1'b0;      
      #500; en_sda_slv = 1'b0;
//    end of the sixth of transaction and transition to idle  

//    start of the second of transaction (writing write two bytes 8'b0101_0101, 8'b1010_1010 to address 7'b101_0101)
      #5000; 
      I_EN = 1'b1;
      I_RW = 1'b0;
      I_ADDR = 7'b101_0101; 
      I_DATA_WR = 8'b0101_0101;
      // acknowledge slave command
      #10000; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000; en_sda_slv = 1'b0;
      // acknowledge slave data (1 byte)
      #8000; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #500; I_DATA_WR = 8'b1010_1010; 
      #500; en_sda_slv = 1'b0;
      // acknowledge slave data (2 byte)
      #8000; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #500; I_EN = 1'b0;      
      #500; en_sda_slv = 1'b0;   
//    end of the second of transaction and transition to idle
      
//    start of the third of transaction (reading one byte 8'b1010_1010 to address 7'b101_0101)
      #500; 
      I_EN = 1'b1;
      I_RW = 1'b1; 
      I_ADDR = 7'b101_0101;
      // acknowledge slave command
      #9500; en_sda_slv = 1'b1; sda_slv = 1'b0;
      #1000;
      // receiving data from the slave 8'b1010_1010
      repeat (3) begin
        sda_slv = 1'b1;
        #1000;
        sda_slv = 1'b0;
        #1000;   
      end
      sda_slv = 1'b1;
      #1000;
      sda_slv = 1'b0;
      #500; I_EN = 1'b0;      
      #500; en_sda_slv = 1'b0;
//    end of the third of receiving data from the slave and  of transaction, transition to idle      
              
    end   
    
    always #1 CLK = ~CLK;

    // initial begin
      // $dumpvars;
    // end
    
    initial 
    #270000 $finish;

 
endmodule